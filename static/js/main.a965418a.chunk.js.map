{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditedSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","value","variant","onChange","e","currentTarget","onKeyPress","charCode","label","color","helperText","IconButton","onClick","AddBox","EditedSpan","console","log","editMode","setEditMode","onDoubleClick","autoFocus","onBlur","omChange","newValue","Task","onClickHandler","useCallback","removeTask","taskId","id","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","key","className","isDone","Checkbox","changeTask","Delete","Todolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","addTask","changeTodolistValue","removeTodolist","map","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","todolistId","action","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","addTodolist","v1","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","spacing","container","tl","style","padding","Paper","elevation","rootReducer","combineReducers","copyState","todolistTasks","task","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCVOC,EAAcC,IAAMC,MAAK,SAACC,GAAgC,MAE3CC,mBAAS,IAFkC,mBAE9DC,EAF8D,KAEvDC,EAFuD,OAG3CF,mBAAwB,MAHmB,mBAG9DG,EAH8D,KAGvDC,EAHuD,KAM7DC,EAAU,WACS,KAAjBJ,EAAMK,QACNP,EAAMM,QAAQJ,GACdC,EAAS,KAETE,EAAS,sBAkBjB,OAAO,6BACC,kBAACG,EAAA,EAAD,CACIC,MAAOP,EACPQ,QAAS,WACTC,SAlBY,SAACC,GACrBT,EAASS,EAAEC,cAAcJ,QAkBjBK,WAfc,SAACF,GACV,OAAVR,GACCC,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAWIF,QAASA,EACTY,MAAO,QACPC,MAAO,UACPC,WAAYd,IAGhB,kBAACe,EAAA,EAAD,CAAYF,MAAO,UAAWG,QAASd,GACnC,kBAACe,EAAA,EAAD,WC1CHC,EAAaxB,IAAMC,MAAK,SAACC,GAClCuB,QAAQC,IAAI,uBADqD,MAEnCvB,oBAAS,GAF0B,mBAE5DwB,EAF4D,KAElDC,EAFkD,OAGzCzB,mBAASD,EAAME,OAH0B,mBAG5DA,EAH4D,KAGrDC,EAHqD,KAkBjE,OAAOsB,EACD,0BAAME,cAdW,WACnBD,GAAaD,KAa2BvB,GACtC,kBAACM,EAAA,EAAD,CACEC,MAAOP,EACP0B,WAAW,EACXC,OAfe,WACnBH,GAAaD,GACbzB,EAAM8B,SAAS9B,EAAME,QAcjBS,SAXY,SAACC,GACjB,IAAImB,EAAWnB,EAAEC,cAAcJ,MAC/BN,EAAS4B,S,2BCaFC,EApBFlC,IAAMC,MAAK,SAACC,GACrB,IAAMiC,EAAiBC,uBAAY,kBAAMlC,EAAMmC,WAAWnC,EAAMoC,OAAQpC,EAAMqC,MAAI,CAACrC,EAAMmC,WAAYnC,EAAMoC,OAAQpC,EAAMqC,KACnHC,EAAkBJ,uBAAY,SAACtB,GACjC,IAAI2B,EAAiB3B,EAAEC,cAAc2B,QACrCxC,EAAMyC,iBAAiBzC,EAAMoC,OAAQG,EAAgBvC,EAAMqC,MAC7D,CAACrC,EAAMyC,iBAAkBzC,EAAMoC,OAAQpC,EAAMqC,KAM/C,OAAO,yBAAKK,IAAK1C,EAAMoC,OAAQO,UAAW3C,EAAM4C,OAAS,UAAY,IACjE,kBAACC,EAAA,EAAD,CAAUlC,SAAU2B,EAAiBE,QAASxC,EAAM4C,OAAQ3B,MAAO,YACnE,kBAACK,EAAD,CAAYpB,MAAOF,EAAME,MAAO4B,SANjB,SAACC,GAChB/B,EAAM8C,WAAWf,EAAU/B,EAAMoC,OAAQpC,EAAMqC,OAM/C,kBAAClB,EAAA,EAAD,CAAYC,QAASa,GACjB,kBAACc,EAAA,EAAD,WCHCC,EAAWlD,IAAMC,MAAK,SAACC,GAGhC,IAEMiD,EAAoBf,uBAAY,kBAAMlC,EAAMkD,aAAa,MAAOlD,EAAMqC,MAAK,IAC3Ec,EAAuBjB,uBAAY,kBAAMlC,EAAMkD,aAAa,SAAUlD,EAAMqC,MAAK,IACjFe,EAA0BlB,uBAAY,kBAAMlC,EAAMkD,aAAa,YAAalD,EAAMqC,MAAK,IAEzFgB,EAAmBrD,EAAMsD,MAER,WAAjBtD,EAAMuD,SACNF,EAAmBA,EAAiBE,QAAO,SAAAC,GAAC,OAAKA,EAAEZ,WAElC,cAAjB5C,EAAMuD,SACNF,EAAmBA,EAAiBE,QAAO,SAAAC,GAAC,OAAIA,EAAEZ,WAGtD,IAAMa,EAAUvB,uBAAY,SAACH,GACzB/B,EAAMyD,QAAQ1B,EAAU/B,EAAMqC,MAC/B,CAACrC,EAAMyD,QAASzD,EAAMqC,KAEnBqB,EAAsBxB,uBAAY,SAACH,GACrC/B,EAAM0D,oBAAoB1D,EAAME,MAAOF,EAAMqC,MAC9C,CAACrC,EAAM0D,oBAAqB1D,EAAMqC,KAErC,OAAO,6BACH,4BAAI,kBAACf,EAAD,CAAYpB,MAAOF,EAAME,MAAO4B,SAAU4B,IAC1C,kBAACvC,EAAA,EAAD,CAAYC,QAzBG,kBAAMpB,EAAM2D,eAAe3D,EAAMqC,MA0B5C,kBAACU,EAAA,EAAD,QAGR,kBAAClD,EAAD,CAAaS,QAASmD,IAEtB,4BAEQJ,EAAiBO,KAAI,SAAAJ,GACjB,OAAO,kBAAC,EAAD,CAAMd,IAAKc,EAAEnB,GACPA,GAAIrC,EAAMqC,GACVD,OAAQoB,EAAEnB,GACVO,OAAQY,EAAEZ,OACV1C,MAAOsD,EAAEtD,MACTuC,iBAAkBzC,EAAMyC,iBACxBK,WAAY9C,EAAM8C,WAClBX,WAAYnC,EAAMmC,iBAI3C,6BACI,kBAAC0B,EAAA,EAAD,CAAQ5C,MAAO,UAAWP,QAA0B,QAAjBV,EAAMuD,OAAmB,YAAc,OAClEnC,QAAS6B,GADjB,OAGA,kBAACY,EAAA,EAAD,CAAQ5C,MAAO,UAAWP,QAA0B,WAAjBV,EAAMuD,OAAsB,YAAc,OACrEnC,QAAS+B,GADjB,UAGA,kBAACU,EAAA,EAAD,CAAQ5C,MAAO,YAAaP,QAA0B,cAAjBV,EAAMuD,OAAyB,YAAc,OAC1EnC,QAASgC,GADjB,kB,+ECnDNU,EAA+B,G,QCQ/BA,EAA+B,G,QCkFtBC,MA5Ff,WAEI,IAAMC,EAAYC,aAA8C,SAAAC,GAAK,OAAIA,EAAMF,aACzEV,EAAQW,aAA8C,SAAAC,GAAK,OAAIA,EAAMZ,SACrEa,EAAWC,cAEXjC,EAAaD,uBAAY,SAACG,EAAYgC,GACxC,IAAMC,ED4Dc,SAAClC,EAAgBiC,GACzC,MAAO,CAACE,KA/DQ,cA+DWnC,SAAQiC,cC7DhBG,CAAanC,EAAIgC,GAChCF,EAASG,KACX,CAACH,IAEGV,EAAUvB,uBAAY,SAAChC,EAAemE,GACpC,IAAMC,ED0DO,SAACpE,EAAemE,GACrC,MAAO,CAACE,KAjEK,WAiEWrE,QAAOmE,cC3DRI,CAAUvE,EAAOmE,GAChCF,EAASG,KACX,CAACH,IACDO,EAAexC,uBAAY,SAACG,EAAYO,EAAiByB,GAC3D,IAAMC,ED0DoB,SAAClC,EAAgBQ,EAAiByB,GAChE,MAAO,CAACE,KApEe,qBAoEWnC,SAAQQ,SAAQyB,cC3D/BM,CAAmBtC,EAAIO,EAAQyB,GAC9CF,EAASG,KACX,CAACH,IAEGrB,EAAaZ,uBAAY,SAACH,EAAkBM,EAAYgC,GAC1D,IAAMC,EDyDmB,SAAClC,EAAgBlC,EAAemE,GAC7D,MAAO,CAACE,KAvEc,oBAuEWnC,SAAQlC,QAAOmE,cC1D7BO,CAAkB7C,EAAUM,EAAIgC,GAC/CF,EAASG,KACX,CAACH,IAEGjB,EAAehB,uBAAY,SAACzB,EAAyB4D,GACvD,IAAMC,EFoBH,CAAEC,KAAM,yBAA0BlC,GEpBQgC,EFoBAd,OEpBP9C,GACtC0D,EAASG,KACX,CAACH,IAEGR,EAAiBzB,uBAAY,SAACG,GAChC,IAAMiC,EFGH,CAAEC,KAAM,kBAAmBlC,GEHEA,GAChC8B,EAASG,KACX,CAACH,IAEGU,EAAc3C,uBAAa,SAACH,GAC9B,IAAMuC,EFEH,CAAEC,KAAM,eAAgBrE,MEFE6B,EFEYsC,WAAYS,eEDrDX,EAASG,KACX,CAACH,IAEGT,EAAsBxB,uBAAY,SAACH,EAAkBM,GACvD,IAAMiC,EFAuB,SAACjC,EAAYnC,GAC9C,MAAO,CAAEqE,KAAM,wBAAyBlC,GAAIA,EAAInC,MAAOA,GEDpC6E,CAAsBhD,EAAUM,GAC/C8B,EAASG,KACX,CAACH,IAEH,OACI,yBAAKxB,UAAU,OACX,kBAACqC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAAC/D,EAAA,EAAD,CAAYgE,KAAK,QAAQlE,MAAM,UAAUmE,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY5E,QAAQ,MAApB,QAGA,kBAACmD,EAAA,EAAD,CAAQ5C,MAAM,WAAd,WAGR,kBAACsE,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAMC,QAAS,IACX,kBAAC7F,EAAD,CAAaS,QAASuE,KAE1B,kBAACY,EAAA,EAAD,CAAME,WAAS,EAACD,QAAS,GAEjB1B,EAAUJ,KAAI,SAAAgC,GAEV,OAAO,kBAACH,EAAA,EAAD,CAAMI,MAAO,CAACC,QAAS,SAC1B,kBAACC,EAAA,EAAD,CAAOC,UAAW,GACd,kBAAChD,EAAD,CACIN,IAAKkD,EAAGvD,GACRA,GAAIuD,EAAGvD,GACPnC,MAAO0F,EAAG1F,MACVoD,MAAOA,EAAMsC,EAAGvD,IAChBF,WAAYA,EACZe,aAAcA,EACdO,QAASA,EACThB,iBAAkBiC,EAClBnB,OAAQqC,EAAGrC,OACXI,eAAgBA,EAChBb,WAAYA,EACZY,oBAAqBA,a,QCxGvDuC,EAAcC,YAAgB,CAChC5C,MFqCwB,WAAgF,IAA/EY,EAA8E,uDAAtDJ,EAAcQ,EAAwC,uCACvG,OAAQA,EAAOC,MACX,IAXY,cAYR,IAAM4B,EAAS,eAAOjC,GAClBkC,EAAgBlC,EAAMI,EAAOD,YAGjC,OADA8B,EAAU7B,EAAOD,YAAc+B,EAAc7C,QAAO,SAAAC,GAAC,OAAIA,EAAEnB,IAAMiC,EAAOlC,UACjE+D,EAEX,IAjBS,WAkBL,IAAMA,EAAS,eAAOjC,GAClBmC,EAAO,CAAChE,GAAIyC,cAAM5E,MAAOoE,EAAOpE,MAAO0C,QAAQ,GAE/CwD,EAAgBlC,EAAMI,EAAOD,YAGjC,OADA8B,EAAU7B,EAAOD,YAAjB,CAAgCgC,GAAhC,mBAAyCD,IAClCD,EAGX,IA1BmB,qBA2Bf,IAAMA,EAAS,eAAOjC,GAClBkC,EAAgBlC,EAAMI,EAAOD,YAE7BgC,EAAOD,EAAcxC,KAAI,SAAAJ,GAAC,OAAIA,EAAEnB,KAAOiC,EAAOlC,OAAhB,eAA6BoB,EAA7B,CAAgCZ,OAAQ0B,EAAO1B,SAAUY,KAG3F,OADA2C,EAAU7B,EAAOD,YAAcgC,EACxBF,EAEX,IAlCkB,oBAmCd,IAAMA,EAAS,eAAOjC,GAClBkC,EAAgBlC,EAAMI,EAAOD,YAE7BgC,EAAOD,EAAcxC,KAAI,SAAAJ,GAAC,OAAIA,EAAEnB,KAAOiC,EAAOlC,OAAhB,eAA6BoB,EAA7B,CAAgCtD,MAAOoE,EAAOpE,QAASsD,KAGzF,OADA2C,EAAU7B,EAAOD,YAAcgC,EACxBF,EAEX,IAAK,eACD,IAAMA,EAAS,eAAOjC,GAEtB,OADAiC,EAAU7B,EAAOD,YAAc,GACxB8B,EAEX,IAAK,kBACD,IAAMA,EAAS,eAAOjC,GAEtB,cADOiC,EAAU7B,EAAOjC,IACjB8D,EAGX,QACI,OAAOjC,IErFfF,UH4B4B,WAAgF,IAA/EE,EAA8E,uDAAtDJ,EAAcQ,EAAwC,uCAC3G,OAAQA,EAAOC,MACX,IAAK,kBACD,OAAOL,EAAMX,QAAO,SAAAqC,GAAE,OAAIA,EAAGvD,IAAMiC,EAAOjC,MAE9C,IAAK,eACD,MAAM,GAAN,mBAAW6B,GAAX,CAAkB,CAAC7B,GAAIiC,EAAOD,WAAYnE,MAAOoE,EAAOpE,MAAOqD,OAAQ,SAE3E,IAAK,wBACD,IAAI+C,EAAWpC,EAAMqC,MAAK,SAAAX,GAAE,OAAIA,EAAGvD,KAAOiC,EAAOjC,MAIjD,OAHIiE,IACAA,EAASpG,MAAQoE,EAAOpE,OAErB,YAAIgE,GAEf,IAAK,yBACD,IAAIoC,EAAWpC,EAAMqC,MAAK,SAAAX,GAAE,OAAIA,EAAGvD,KAAOiC,EAAOjC,MAIjD,OAHIiE,IACAA,EAAS/C,OAASe,EAAOf,QAEtB,YAAIW,GAEf,QACG,OAAOA,MGhDLsC,EAAQC,YAAYR,GAMjCxG,OAAO+G,MAAQA,ECTfE,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OACSI,SAASC,eAAe,STgInC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhH,GACLmB,QAAQnB,MAAMA,EAAMiH,c","file":"static/js/main.a965418a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add, AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (newTitle: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    // console.log('AddItemForm loaded')\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n            <TextField\r\n                value={title}\r\n                variant={\"outlined\"}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                label={'Title'}\r\n                color={\"primary\"}\r\n                helperText={error}\r\n            />\r\n\r\n            <IconButton color={\"primary\"} onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n\r\n\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditedSpanPropsType = {\r\n    title: string\r\n    omChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditedSpan = React.memo((props: EditedSpanPropsType) => {\r\n    console.log('EditableSpan called' )\r\n    let [editMode, setEditMode] = useState(true)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    const changeEditMode = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n    const changeViewMode = () => {\r\n        setEditMode(!editMode)\r\n        props.omChange(props.title)\r\n    }\r\n\r\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newValue = e.currentTarget.value\r\n        setTitle(newValue)\r\n    }\r\n\r\n    return editMode\r\n        ? <span onDoubleClick={changeEditMode}>{title}</span>\r\n        : <TextField\r\n            value={title}\r\n            autoFocus={true}\r\n            onBlur={changeViewMode}\r\n            onChange={changeValue}\r\n        />\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditedSpan} from \"./EditedSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskPropsType = {\r\n    id: string\r\n    taskId: string\r\n    isDone: boolean\r\n    title: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTask: (newValue: string, id: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n\r\n}\r\n\r\nconst Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.taskId, props.id),[props.removeTask, props.taskId, props.id])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.taskId, newIsDoneValue, props.id);\r\n    },[props.changeTaskStatus, props.taskId, props.id])\r\n\r\n    const changeTask = (newValue: string) => {\r\n        props.changeTask(newValue, props.taskId, props.id)\r\n    }\r\n\r\n    return <div key={props.taskId} className={props.isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox onChange={onChangeHandler} checked={props.isDone} color={\"primary\"}/>\r\n        <EditedSpan title={props.title} omChange={changeTask}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\nexport default Task;","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditedSpan} from \"./EditedSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport Task from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    changeTask: (newValue: string, id: string, todolistId: string) => void\r\n    changeTodolistValue: (newValue: string, id: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    // console.log('Todolist called')\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), []);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), []);\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone);\r\n    }\r\n\r\n    const addTask = useCallback((newValue: string) => {\r\n        props.addTask(newValue, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const changeTodolistValue = useCallback((newValue: string) => {\r\n        props.changeTodolistValue(props.title, props.id)\r\n    }, [props.changeTodolistValue, props.id])\r\n\r\n    return <div>\r\n        <h3><EditedSpan title={props.title} omChange={changeTodolistValue}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n\r\n        <ul>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <Task key={t.id}\r\n                                 id={props.id}\r\n                                 taskId={t.id}\r\n                                 isDone={t.isDone}\r\n                                 title={t.title}\r\n                                 changeTaskStatus={props.changeTaskStatus}\r\n                                 changeTask={props.changeTask}\r\n                                 removeTask={props.removeTask}/>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button color={\"default\"} variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button color={\"primary\"} variant={props.filter === 'active' ? \"contained\" : \"text\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color={\"secondary\"} variant={props.filter === 'completed' ? \"contained\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\n\r\ntype ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst initialState: TodolistType[] = []\r\n\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const todolistsReducer = (state: TodolistType[] = initialState, action: ActionsType): TodolistType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\"}]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            let todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            let todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n           return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\n\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: \"ADD-TODOLIST\", title: title, todolistId: v1()}\r\n}\r\n\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title}\r\n}\r\n\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string, ): ChangeTodolistFilterActionType => {\r\n    return { type: \"CHANGE-TODOLIST-FILTER\", id: id, filter: filter}\r\n}\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\r\n| AddTodolistActionType | RemoveTodolistActionType\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\n\r\ntype AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\n\r\ntype ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\n\r\nconst REMOVE_TASK = 'REMOVE-TASK'\r\nconst ADD_TASK = 'ADD-TASK'\r\nconst CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'\r\nconst CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case REMOVE_TASK: {\r\n            const copyState = {...state}\r\n            let todolistTasks = state[action.todolistId];\r\n            // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n            copyState[action.todolistId] = todolistTasks.filter(t => t.id != action.taskId);\r\n            return copyState\r\n        }\r\n        case ADD_TASK: {\r\n            const copyState = {...state}\r\n            let task = {id: v1(), title: action.title, isDone: false};\r\n            //достанем нужный массив по todolistId:\r\n            let todolistTasks = state[action.todolistId];\r\n            // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n            copyState[action.todolistId] = [task, ...todolistTasks];\r\n            return copyState\r\n\r\n        }\r\n        case CHANGE_TASK_STATUS: {\r\n            const copyState = {...state}\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let task = todolistTasks.map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t);\r\n            //изменим таску, если она нашлась\r\n            copyState[action.todolistId] = task\r\n            return copyState\r\n        }\r\n        case CHANGE_TASK_TITLE: {\r\n            const copyState = {...state}\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let task = todolistTasks.map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n            //изменим таску, если она нашлась\r\n            copyState[action.todolistId] = task\r\n            return copyState\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const copyState = {...state}\r\n            copyState[action.todolistId] = []\r\n            return copyState\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: REMOVE_TASK, taskId, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: ADD_TASK, title, todolistId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: CHANGE_TASK_STATUS, taskId, isDone, todolistId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: CHANGE_TASK_TITLE, taskId, title, todolistId}\r\n}\r\n","import React, {useCallback, useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, TodolistType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n            const action = addTaskAC(title, todolistId)\r\n            dispatch(action)\r\n        },[dispatch])\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const changeTask = useCallback((newValue: string, id: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(newValue, id, todolistId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(value, todolistId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const addTodolist = useCallback( (newValue: string) => {\r\n        const action = addTodolistAC(newValue)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const changeTodolistValue = useCallback((newValue: string, id: string) => {\r\n        const action = changeTodolistTitleAC(newValue, id)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid spacing={10}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n\r\n                            return <Grid style={{padding: '20px'}}>\r\n                                <Paper elevation={5}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTask={changeTask}\r\n                                        changeTodolistValue={changeTodolistValue}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}